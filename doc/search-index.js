var searchIndex={};
searchIndex["mio"] = {"doc":"Mio is a fast, low-level I/O library for Rust focusing on…","i":[[3,"Interest","mio","Interest used in registering.",null,null],[3,"Poll","","Polls for readiness events on all registered values.",null,null],[3,"Registry","","Registers I/O resources.",null,null],[3,"Token","","Associates readiness events with [`event::Source`]s.",null,null],[12,"0","","",0,null],[3,"Waker","","Waker allows cross-thread waking of [`Poll`].",null,null],[18,"READABLE","","Returns a `Interest` set representing readable interests.",1,null],[18,"WRITABLE","","Returns a `Interest` set representing writable interests.",1,null],[11,"add","","Add together two `Interest`.",1,[[["interest"]],["interest"]]],[11,"is_readable","","Returns true if the value includes readable readiness.",1,[[],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness.",1,[[],["bool"]]],[11,"is_aio","","Returns true if `Interest` contains AIO readiness",1,[[],["bool"]]],[11,"is_lio","","Returns true if `Interest` contains LIO readiness",1,[[],["bool"]]],[11,"registry","","Create a separate `Registry` which can be used to register…",2,[[["self"]],["registry"]]],[11,"poll","","Wait for readiness events",2,[[["duration"],["events"],["self"],["option",["duration"]]],["result"]]],[11,"new","","Return a new `Poll` handle.",2,[[],[["result",["poll"]],["poll"]]]],[11,"register","","Register an [`event::Source`] with the `Poll` instance.",3,[[["token"],["interest"],["s"],["self"]],["result"]]],[11,"reregister","","Re-register an [`event::Source`] with the `Poll` instance.",3,[[["token"],["interest"],["s"],["self"]],["result"]]],[11,"deregister","","Deregister an [`event::Source`] with the `Poll` instance.",3,[[["s"],["self"]],["result"]]],[11,"try_clone","","Creates a new independently owned `Registry`.",3,[[["self"]],[["registry"],["result",["registry"]]]]],[11,"new","","Create a new `Waker`.",4,[[["token"],["registry"]],[["waker"],["result",["waker"]]]]],[11,"wake","","Wake up the [`Poll`] associated with this `Waker`.",4,[[["self"]],["result"]]],[0,"event","","Readiness event types and utilities.",null,null],[3,"Event","mio::event","A readiness event.",null,null],[3,"Events","","A collection of readiness events.",null,null],[3,"Iter","","[`Events`] iterator.",null,null],[11,"token","","Returns the event's token.",5,[[["self"]],["token"]]],[11,"is_readable","","Returns true if the event contains readable readiness.",5,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the event contains writable readiness.",5,[[["self"]],["bool"]]],[11,"is_error","","Returns true if the event contains error readiness.",5,[[["self"]],["bool"]]],[11,"is_read_closed","","Returns true if the event contains read closed readiness.",5,[[["self"]],["bool"]]],[11,"is_write_closed","","Returns true if the event contains write closed readiness.",5,[[["self"]],["bool"]]],[11,"is_priority","","Returns true if the event contains priority readiness.",5,[[["self"]],["bool"]]],[11,"is_aio","","Returns true if the event contains AIO readiness.",5,[[["self"]],["bool"]]],[11,"is_lio","","Returns true if the event contains LIO readiness.",5,[[["self"]],["bool"]]],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity`…",6,[[["usize"]],["events"]]],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",6,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Event` values.",6,[[["self"]],["iter"]]],[11,"clear","","Clearing all `Event` values from container explicitly.",6,[[["self"]]]],[8,"Source","","An event source that may be registered with [`Registry`].",null,null],[10,"register","","Register `self` with the given `Registry` instance.",7,[[["token"],["registry"],["interest"],["self"]],["result"]]],[10,"reregister","","Re-register `self` with the given `Registry` instance.",7,[[["token"],["registry"],["interest"],["self"]],["result"]]],[10,"deregister","","Deregister `self` from the given `Registry` instance.",7,[[["self"],["registry"]],["result"]]],[0,"net","mio","Networking primitives",null,null],[3,"TcpListener","mio::net","A structure representing a socket server",null,null],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a…",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[3,"SocketAddr","","An address associated with a `mio` specific Unix socket.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[3,"UnixListener","","A non-blocking Unix domain socket server.",null,null],[3,"UnixStream","","A non-blocking Unix stream socket.",null,null],[11,"bind","","Convenience method to bind a new TCP listener to the…",8,[[["socketaddr"]],[["tcplistener"],["result",["tcplistener"]]]]],[11,"from_std","","Creates a new `TcpListener` from a standard…",8,[[["tcplistener"]],["tcplistener"]]],[11,"accept","","Accepts a new `TcpStream`.",8,[[["self"]],["result"]]],[11,"local_addr","","Returns the local socket address of this listener.",8,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,[[["u32"],["self"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"connect","","Create a new TCP stream and issue a non-blocking connect…",9,[[["socketaddr"]],[["result",["tcpstream"]],["tcpstream"]]]],[11,"from_std","","Creates a new `TcpStream` from a standard `net::TcpStream`.",9,[[["tcpstream"]],["tcpstream"]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP…",9,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP…",9,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",9,[[["self"],["shutdown"]],["result"]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",9,[[["self"],["bool"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",9,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,[[["u32"],["self"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"peek","","Receives data on the socket from the remote address to…",9,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"bind","","Creates a UDP socket from the given address.",10,[[["socketaddr"]],[["udpsocket"],["result",["udpsocket"]]]]],[11,"from_std","","Creates a new `UdpSocket` from a standard `net::UdpSocket`.",10,[[["udpsocket"]],["udpsocket"]]],[11,"local_addr","","Returns the socket address that this socket was created…",10,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"send_to","","Sends data on the socket to the given address. On success,…",10,[[["self"],["socketaddr"]],[["result",["usize"]],["usize"]]]],[11,"recv_from","","Receives data from the socket. On success, returns the…",10,[[["self"]],["result"]]],[11,"peek_from","","Receives data from the socket, without removing it from…",10,[[["self"]],["result"]]],[11,"send","","Sends data on the socket to the address previously bound…",10,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"recv","","Receives data from the socket previously bound with…",10,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"peek","","Receives data from the socket, without removing it from…",10,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"connect","","Connects the UDP socket setting the default destination…",10,[[["self"],["socketaddr"]],["result"]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",10,[[["self"],["bool"]],["result"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",10,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this…",10,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this…",10,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this…",10,[[["u32"],["self"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this…",10,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for…",10,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for…",10,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",10,[[["u32"],["self"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",10,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",10,[[["self"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",10,[[["u32"],["self"],["ipv6addr"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",10,[[["self"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",10,[[["u32"],["self"],["ipv6addr"]],["result"]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",10,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"bind","","Creates a Unix datagram socket bound to the given path.",11,[[["path"],["asref",["path"]]],[["result",["unixdatagram"]],["unixdatagram"]]]],[11,"from_std","","Creates a new `UnixDatagram` from a standard…",11,[[["unixdatagram"]],["unixdatagram"]]],[11,"connect","","Connects the socket to the specified address.",11,[[["path"],["self"],["asref",["path"]]],["result"]]],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any…",11,[[],[["result",["unixdatagram"]],["unixdatagram"]]]],[11,"pair","","Create an unnamed pair of connected sockets.",11,[[],["result"]]],[11,"local_addr","","Returns the address of this socket.",11,[[["self"]],[["socketaddr"],["result",["socketaddr"]]]]],[11,"peer_addr","","Returns the address of this socket's peer.",11,[[["self"]],[["socketaddr"],["result",["socketaddr"]]]]],[11,"recv_from","","Receives data from the socket.",11,[[["self"]],["result"]]],[11,"recv","","Receives data from the socket.",11,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"send_to","","Sends data on the socket to the specified address.",11,[[["path"],["self"],["asref",["path"]]],[["result",["usize"]],["usize"]]]],[11,"send","","Sends data on the socket to the socket's peer.",11,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",11,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"shutdown","","Shut down the read, write, or both halves of this…",11,[[["self"],["shutdown"]],["result"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",12,[[["path"],["asref",["path"]]],[["unixlistener"],["result",["unixlistener"]]]]],[11,"from_std","","Creates a new `UnixListener` from a standard…",12,[[["unixlistener"]],["unixlistener"]]],[11,"accept","","Accepts a new incoming connection to this listener.",12,[[["self"]],["result"]]],[11,"local_addr","","Returns the local socket address of this listener.",12,[[["self"]],[["socketaddr"],["result",["socketaddr"]]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",12,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"connect","","Connects to the socket named by `path`.",13,[[["path"],["asref",["path"]]],[["result",["unixstream"]],["unixstream"]]]],[11,"from_std","","Creates a new `UnixStream` from a standard…",13,[[["unixstream"]],["unixstream"]]],[11,"pair","","Creates an unnamed pair of connected sockets.",13,[[],["result"]]],[11,"local_addr","","Returns the socket address of the local half of this…",13,[[["self"]],[["socketaddr"],["result",["socketaddr"]]]]],[11,"peer_addr","","Returns the socket address of the remote half of this…",13,[[["self"]],[["socketaddr"],["result",["socketaddr"]]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",13,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",13,[[["self"],["shutdown"]],["result"]]],[0,"unix","mio","Unix only extensions.",null,null],[3,"SourceFd","mio::unix","Adapter for [`RawFd`] providing an [`event::Source`]…",null,null],[12,"0","","",14,null],[0,"features","mio","Mio's optional features.",null,null],[0,"guide","","Getting started guide.",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","mio::unix","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","mio::net","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","mio::event","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"into_iter","","",16,[[],["i"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","mio::net","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"register","mio::unix","",14,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"reregister","","",14,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"deregister","","",14,[[["self"],["registry"]],["result"]]],[11,"register","mio::net","",8,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"reregister","","",8,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"deregister","","",8,[[["self"],["registry"]],["result"]]],[11,"register","","",9,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"reregister","","",9,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"deregister","","",9,[[["self"],["registry"]],["result"]]],[11,"register","","",10,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"reregister","","",10,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"deregister","","",10,[[["self"],["registry"]],["result"]]],[11,"register","","",11,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"reregister","","",11,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"deregister","","",11,[[["self"],["registry"]],["result"]]],[11,"register","","",12,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"reregister","","",12,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"deregister","","",12,[[["self"],["registry"]],["result"]]],[11,"register","","",13,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"reregister","","",13,[[["token"],["registry"],["interest"],["self"]],["result"]]],[11,"deregister","","",13,[[["self"],["registry"]],["result"]]],[11,"next","mio::event","",16,[[["self"]],["option"]]],[11,"clone","mio","",1,[[["self"]],["interest"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"clone","mio::event","",16,[[["self"]],["iter"]]],[11,"cmp","mio","",1,[[["interest"],["self"]],["ordering"]]],[11,"cmp","","",0,[[["token"],["self"]],["ordering"]]],[11,"eq","","",1,[[["interest"],["self"]],["bool"]]],[11,"ne","","",1,[[["interest"],["self"]],["bool"]]],[11,"eq","","",0,[[["token"],["self"]],["bool"]]],[11,"ne","","",0,[[["token"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["interest"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["interest"],["self"]],["bool"]]],[11,"le","","",1,[[["interest"],["self"]],["bool"]]],[11,"gt","","",1,[[["interest"],["self"]],["bool"]]],[11,"ge","","",1,[[["interest"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["token"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["token"],["self"]],["bool"]]],[11,"le","","",0,[[["token"],["self"]],["bool"]]],[11,"gt","","",0,[[["token"],["self"]],["bool"]]],[11,"ge","","",0,[[["token"],["self"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","mio::unix","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","mio::net","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","mio","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","mio::event","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","mio::net","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"bitor","mio","",1,[[],["self"]]],[11,"bitor_assign","","",1,[[["self"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"read","mio::net","",9,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",9,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read","","",13,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",13,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write","","",9,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",9,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",9,[[["self"]],["result"]]],[11,"write","","",13,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",13,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",13,[[["self"]],["result"]]],[11,"as_raw_fd","mio","",2,[[["self"]],["rawfd"]]],[11,"as_raw_fd","mio::net","",8,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",10,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",11,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",12,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",13,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","Converts a `RawFd` to a `TcpListener`.",8,[[["rawfd"]],["tcplistener"]]],[11,"from_raw_fd","","Converts a `RawFd` to a `TcpStream`.",9,[[["rawfd"]],["tcpstream"]]],[11,"from_raw_fd","","Converts a `RawFd` to a `UdpSocket`.",10,[[["rawfd"]],["udpsocket"]]],[11,"from_raw_fd","","Converts a `RawFd` to a `UnixDatagram`.",11,[[["rawfd"]],["unixdatagram"]]],[11,"from_raw_fd","","Converts a `RawFd` to a `UnixListener`.",12,[[["rawfd"]],["unixlistener"]]],[11,"from_raw_fd","","Converts a `RawFd` to a `UnixStream`.",13,[[["rawfd"]],["unixstream"]]],[11,"into_raw_fd","","",8,[[],["rawfd"]]],[11,"into_raw_fd","","",9,[[],["rawfd"]]],[11,"into_raw_fd","","",10,[[],["rawfd"]]],[11,"into_raw_fd","","",11,[[],["rawfd"]]],[11,"into_raw_fd","","",12,[[],["rawfd"]]],[11,"into_raw_fd","","",13,[[],["rawfd"]]],[11,"is_unnamed","","Returns `true` if the address is unnamed.",15,[[["self"]],["bool"]]],[11,"as_pathname","","Returns the contents of this address if it is a `pathname`…",15,[[["self"]],[["path"],["option",["path"]]]]]],"p":[[3,"Token"],[3,"Interest"],[3,"Poll"],[3,"Registry"],[3,"Waker"],[3,"Event"],[3,"Events"],[8,"Source"],[3,"TcpListener"],[3,"TcpStream"],[3,"UdpSocket"],[3,"UnixDatagram"],[3,"UnixListener"],[3,"UnixStream"],[3,"SourceFd"],[3,"SocketAddr"],[3,"Iter"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);